// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for both customers and business owners
model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  name          String
  phone         String?
  role          UserRole       @default(CUSTOMER)
  emailVerified DateTime?
  
  // Stripe fields
  stripeCustomerId String?      @unique
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Relations
  business      Business?
  bookings      Booking[]
  reviews       Review[]
}

model Business {
  id               String         @id @default(cuid())
  userId           String         @unique
  businessName     String
  slug             String         @unique
  description      String?
  category         BusinessCategory
  address          String
  city             String
  state            String
  zipCode          String
  phone            String
  email            String?
  website          String?
  instagram        String?
  isVerified       Boolean        @default(false)
  isActive         Boolean        @default(true)
  images           String[]
  openingHours     Json
  
  // Stripe Connect fields
  stripeAccountId  String?        @unique
  stripeOnboarded  Boolean        @default(false)
  commissionRate   Decimal        @default(15.0) @db.Decimal(5, 2) // Platform commission percentage
  
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  
  // Relations
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  services         Service[]
  bookings         Booking[]
  reviews          Review[]
  availabilities   Availability[]
  timeOffs         TimeOff[]
  payouts          Payout[]
  staff            Staff[]
}

model Service {
  id          String         @id @default(cuid())
  businessId  String
  name        String
  description String?
  price       Decimal        @db.Decimal(10, 2)
  duration    Int            // Duration in minutes
  category    String
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  // Relations
  business    Business       @relation(fields: [businessId], references: [id], onDelete: Cascade)
  bookings    Booking[]
  staff       StaffService[] // Staff members who can perform this service
}

model Booking {
  id          String        @id @default(cuid())
  userId      String
  businessId  String
  serviceId   String
  staffId     String?       // Optional staff assignment
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  status      BookingStatus @default(PENDING)
  notes       String?
  totalPrice  Decimal       @db.Decimal(10, 2)
  
  // Payment fields
  paymentStatus    PaymentStatus  @default(PENDING)
  stripePaymentIntentId String?   @unique
  stripeFee        Decimal?       @db.Decimal(10, 2) // Stripe processing fee
  platformFee      Decimal?       @db.Decimal(10, 2) // Platform commission
  businessPayout   Decimal?       @db.Decimal(10, 2) // Amount business receives
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  user        User          @relation(fields: [userId], references: [id])
  business    Business      @relation(fields: [businessId], references: [id])
  service     Service       @relation(fields: [serviceId], references: [id])
  staff       Staff?        @relation(fields: [staffId], references: [id])
  review      Review?
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  businessId String
  bookingId  String   @unique
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  user       User     @relation(fields: [userId], references: [id])
  business   Business @relation(fields: [businessId], references: [id])
  booking    Booking  @relation(fields: [bookingId], references: [id])
}

model Availability {
  id         String   @id @default(cuid())
  businessId String
  dayOfWeek  Int      // 0-6 (Sunday-Saturday)
  startTime  String   // HH:MM format
  endTime    String   // HH:MM format
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  
  // Relations
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  @@unique([businessId, dayOfWeek])
  @@index([businessId, isActive])
}

model TimeOff {
  id         String   @id @default(cuid())
  businessId String
  date       DateTime @db.Date
  startTime  String?  // HH:MM format, null for full day
  endTime    String?  // HH:MM format, null for full day
  reason     String?
  createdAt  DateTime @default(now())
  
  // Relations
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  @@index([businessId, date])
}

model Payout {
  id              String   @id @default(cuid())
  businessId      String
  amount          Decimal  @db.Decimal(10, 2)
  status          String   // pending, paid, failed
  stripePayoutId  String?  @unique
  paidAt          DateTime?
  failureReason   String?
  createdAt       DateTime @default(now())
  
  // Relations
  business        Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  @@index([businessId, status])
}

// Enums
enum UserRole {
  CUSTOMER
  BUSINESS_OWNER
  ADMIN
}

enum BusinessCategory {
  HAIR_SALON
  BARBER_SHOP
  NAIL_SALON
  SPA
  MASSAGE
  MAKEUP
  SKINCARE
  WELLNESS
  OTHER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  REFUNDED
  CANCELLED
}

model Staff {
  id              String           @id @default(cuid())
  businessId      String
  name            String
  email           String
  phone           String?
  role            StaffRole        @default(STAFF)
  isActive        Boolean          @default(true)
  canManageBookings Boolean        @default(true)
  canManageStaff  Boolean          @default(false)
  profileImage    String?
  bio             String?
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  // Relations
  business        Business         @relation(fields: [businessId], references: [id], onDelete: Cascade)
  services        StaffService[]   // Services this staff member can perform
  schedules       StaffSchedule[]  // Working hours
  bookings        Booking[]        // Bookings assigned to this staff
  
  @@unique([businessId, email])
  @@index([businessId, isActive])
}

model StaffService {
  id          String   @id @default(cuid())
  staffId     String
  serviceId   String
  createdAt   DateTime @default(now())
  
  // Relations
  staff       Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  @@unique([staffId, serviceId])
  @@index([staffId])
  @@index([serviceId])
}

model StaffSchedule {
  id          String   @id @default(cuid())
  staffId     String
  dayOfWeek   Int      // 0-6 (Sunday-Saturday)
  startTime   String   // HH:MM format
  endTime     String   // HH:MM format
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  staff       Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  
  @@unique([staffId, dayOfWeek])
  @@index([staffId, isActive])
}

enum StaffRole {
  OWNER
  MANAGER
  STAFF
}