// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for both customers and business owners
model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  name          String
  phone         String?
  role          UserRole       @default(CUSTOMER)
  emailVerified DateTime?
  
  // Stripe fields
  stripeCustomerId String?      @unique
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Relations
  business      Business?
  bookings      Booking[]
  reviews       Review[]
  customerProfiles CustomerProfile[]
}

model Business {
  id               String         @id @default(cuid())
  userId           String         @unique
  businessName     String
  slug             String         @unique
  description      String?
  category         BusinessCategory
  address          String
  city             String
  state            String
  zipCode          String
  latitude         Float?         // Added for map functionality
  longitude        Float?         // Added for map functionality
  phone            String
  email            String?
  website          String?
  instagram        String?
  isVerified       Boolean        @default(false)
  isActive         Boolean        @default(true)
  images           String[]
  openingHours     Json
  
  // Stripe Connect fields
  stripeAccountId  String?        @unique
  stripeOnboarded  Boolean        @default(false)
  commissionRate   Decimal        @default(15.0) @db.Decimal(5, 2) // Platform commission percentage
  
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  
  // Relations
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  services         Service[]
  bookings         Booking[]
  reviews          Review[]
  availabilities   Availability[]
  timeOffs         TimeOff[]
  payouts          Payout[]
  staff            Staff[]
  customerProfiles CustomerProfile[]
  communications   Communication[]
  notificationSettings NotificationSettings?
  promotions       Promotion[]
  photos           BusinessPhoto[]
}

model Service {
  id          String         @id @default(cuid())
  businessId  String
  name        String
  description String?
  price       Decimal        @db.Decimal(10, 2)
  duration    Int            // Duration in minutes
  category    String
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  // Relations
  business    Business       @relation(fields: [businessId], references: [id], onDelete: Cascade)
  bookings    Booking[]
  staff       StaffService[] // Staff members who can perform this service
}

model Booking {
  id          String        @id @default(cuid())
  userId      String
  businessId  String
  serviceId   String
  staffId     String?       // Optional staff assignment
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  status      BookingStatus @default(PENDING)
  notes       String?
  totalPrice  Decimal       @db.Decimal(10, 2)
  
  // Payment fields
  paymentStatus    PaymentStatus  @default(PENDING)
  stripePaymentIntentId String?   @unique
  stripeFee        Decimal?       @db.Decimal(10, 2) // Stripe processing fee
  platformFee      Decimal?       @db.Decimal(10, 2) // Platform commission
  businessPayout   Decimal?       @db.Decimal(10, 2) // Amount business receives
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  user        User          @relation(fields: [userId], references: [id])
  business    Business      @relation(fields: [businessId], references: [id])
  service     Service       @relation(fields: [serviceId], references: [id])
  staff       Staff?        @relation(fields: [staffId], references: [id])
  review      Review?
}

model Review {
  id         String   @id @default(cuid())
  userId     String
  businessId String
  bookingId  String   @unique
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  user       User     @relation(fields: [userId], references: [id])
  business   Business @relation(fields: [businessId], references: [id])
  booking    Booking  @relation(fields: [bookingId], references: [id])
}

model Availability {
  id         String   @id @default(cuid())
  businessId String
  dayOfWeek  Int      // 0-6 (Sunday-Saturday)
  startTime  String   // HH:MM format
  endTime    String   // HH:MM format
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  
  // Relations
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  @@unique([businessId, dayOfWeek])
  @@index([businessId, isActive])
}

model TimeOff {
  id         String   @id @default(cuid())
  businessId String
  date       DateTime @db.Date
  startTime  String?  // HH:MM format, null for full day
  endTime    String?  // HH:MM format, null for full day
  reason     String?
  createdAt  DateTime @default(now())
  
  // Relations
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  @@index([businessId, date])
}

model Payout {
  id              String   @id @default(cuid())
  businessId      String
  amount          Decimal  @db.Decimal(10, 2)
  status          String   // pending, paid, failed
  stripePayoutId  String?  @unique
  paidAt          DateTime?
  failureReason   String?
  createdAt       DateTime @default(now())
  
  // Relations
  business        Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  @@index([businessId, status])
}

// Enums
enum UserRole {
  CUSTOMER
  BUSINESS_OWNER
  ADMIN
}

enum BusinessCategory {
  HAIR_SALON
  BARBER_SHOP
  NAIL_SALON
  SPA
  MASSAGE
  MAKEUP
  SKINCARE
  WELLNESS
  OTHER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  REFUNDED
  CANCELLED
}

model Staff {
  id              String           @id @default(cuid())
  businessId      String
  name            String
  email           String
  phone           String?
  role            StaffRole        @default(STAFF)
  isActive        Boolean          @default(true)
  canManageBookings Boolean        @default(true)
  canManageStaff  Boolean          @default(false)
  profileImage    String?
  bio             String?
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  // Relations
  business        Business         @relation(fields: [businessId], references: [id], onDelete: Cascade)
  services        StaffService[]   // Services this staff member can perform
  schedules       StaffSchedule[]  // Working hours
  bookings        Booking[]        // Bookings assigned to this staff
  communications  Communication[]  // Communications sent by this staff
  
  @@unique([businessId, email])
  @@index([businessId, isActive])
}

model StaffService {
  id          String   @id @default(cuid())
  staffId     String
  serviceId   String
  createdAt   DateTime @default(now())
  
  // Relations
  staff       Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  
  @@unique([staffId, serviceId])
  @@index([staffId])
  @@index([serviceId])
}

model StaffSchedule {
  id          String   @id @default(cuid())
  staffId     String
  dayOfWeek   Int      // 0-6 (Sunday-Saturday)
  startTime   String   // HH:MM format
  endTime     String   // HH:MM format
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  staff       Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)
  
  @@unique([staffId, dayOfWeek])
  @@index([staffId, isActive])
}

enum StaffRole {
  OWNER
  MANAGER
  STAFF
}

// CRM Models
model CustomerProfile {
  id              String           @id @default(cuid())
  businessId      String
  userId          String
  
  // Denormalized data for quick access
  customerName    String
  customerEmail   String
  customerPhone   String?
  
  // Customer insights
  firstVisit      DateTime?
  lastVisit       DateTime?
  totalVisits     Int              @default(0)
  totalSpent      Decimal          @default(0) @db.Decimal(10, 2)
  averageSpent    Decimal          @default(0) @db.Decimal(10, 2)
  favoriteService String?
  
  // Customer preferences
  notes           String?          @db.Text
  tags            String[]         @default([])
  birthday        DateTime?
  preferences     Json?            // Store preferences like "prefers morning appointments"
  
  // Status
  isVip           Boolean          @default(false)
  isBlocked       Boolean          @default(false)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  // Relations
  business        Business         @relation(fields: [businessId], references: [id], onDelete: Cascade)
  user            User             @relation(fields: [userId], references: [id])
  communications  Communication[]
  
  @@unique([businessId, userId])
  @@index([businessId, lastVisit])
  @@index([businessId, totalSpent])
}

model Communication {
  id              String           @id @default(cuid())
  businessId      String
  customerId      String
  staffId         String?
  
  type            CommunicationType
  subject         String?
  content         String           @db.Text
  status          CommunicationStatus @default(SENT)
  
  sentAt          DateTime         @default(now())
  readAt          DateTime?
  
  // Relations
  business        Business         @relation(fields: [businessId], references: [id], onDelete: Cascade)
  customer        CustomerProfile  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  staff           Staff?           @relation(fields: [staffId], references: [id])
  
  @@index([businessId, customerId])
  @@index([businessId, sentAt])
}

enum CommunicationType {
  EMAIL
  SMS
  NOTE
  SYSTEM
}

enum CommunicationStatus {
  DRAFT
  SENT
  DELIVERED
  FAILED
  READ
}

// Notification Settings Models
model NotificationSettings {
  id              String   @id @default(cuid())
  businessId      String   @unique
  
  // Email Settings
  emailEnabled    Boolean  @default(true)
  emailFrom       String?  // Custom from name
  emailReplyTo    String?  // Reply-to email
  
  // SMS Settings
  smsEnabled      Boolean  @default(false)
  smsFrom         String?  // SMS sender ID/number
  
  // Global Settings
  timezone        String   @default("America/New_York")
  quietHoursStart String?  // HH:MM format (e.g., "21:00")
  quietHoursEnd   String?  // HH:MM format (e.g., "09:00")
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  business        Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  templates       NotificationTemplate[]
  triggers        NotificationTrigger[]
}

model NotificationTemplate {
  id              String   @id @default(cuid())
  settingsId      String
  type            NotificationType
  channel         NotificationChannel
  
  name            String
  subject         String?  // For emails
  content         String   @db.Text
  variables       String[] // Available variables like {{customerName}}, {{serviceName}}
  
  isActive        Boolean  @default(true)
  isDefault       Boolean  @default(false) // Use platform default if true
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  settings        NotificationSettings @relation(fields: [settingsId], references: [id], onDelete: Cascade)
  
  @@unique([settingsId, type, channel])
  @@index([settingsId, isActive])
}

model NotificationTrigger {
  id              String   @id @default(cuid())
  settingsId      String
  
  event           NotificationEvent
  channel         NotificationChannel
  enabled         Boolean  @default(true)
  
  // Timing
  timing          TriggerTiming @default(IMMEDIATE)
  delayMinutes    Int?     // For DELAYED timing
  advanceHours    Int?     // For ADVANCE timing (e.g., 24 hours before appointment)
  
  // Conditions
  conditions      Json?    // Additional conditions like minimum spend, customer type, etc.
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  settings        NotificationSettings @relation(fields: [settingsId], references: [id], onDelete: Cascade)
  
  @@unique([settingsId, event, channel])
  @@index([settingsId, enabled])
}

enum NotificationType {
  BOOKING_CONFIRMATION
  BOOKING_REMINDER
  BOOKING_CANCELLED
  BOOKING_RESCHEDULED
  BOOKING_COMPLETED
  REVIEW_REQUEST
  PROMOTIONAL
  BIRTHDAY
  RE_ENGAGEMENT
}

enum NotificationChannel {
  EMAIL
  SMS
  BOTH
}

enum NotificationEvent {
  BOOKING_CREATED
  BOOKING_CONFIRMED
  BOOKING_CANCELLED
  BOOKING_COMPLETED
  BEFORE_APPOINTMENT
  AFTER_APPOINTMENT
  CUSTOMER_BIRTHDAY
  CUSTOMER_INACTIVE
}

enum TriggerTiming {
  IMMEDIATE
  DELAYED
  ADVANCE
  SCHEDULED
}



// Promotion Management Models
model Promotion {
  id              String   @id @default(cuid())
  businessId      String
  
  // Basic Info
  name            String
  description     String?
  code            String?  // Promo code (null for automatic promotions)
  
  // Type and Value
  type            PromotionType
  value           Decimal  @db.Decimal(10, 2) // Percentage or fixed amount
  
  // Scope
  scope           PromotionScope
  serviceIds      String[] // Specific services (if scope is SPECIFIC_SERVICES)
  
  // Validity
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean  @default(true)
  
  // Usage Limits
  usageLimit      Int?     // Total number of times this can be used
  usageCount      Int      @default(0)
  perCustomerLimit Int?    // Times a single customer can use this
  
  // Requirements
  minimumAmount   Decimal? @db.Decimal(10, 2) // Minimum purchase amount
  minimumItems    Int?     // Minimum number of items
  firstTimeOnly   Boolean  @default(false) // Only for first-time customers
  
  // Display
  featured        Boolean  @default(false) // Show prominently on business page
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  business        Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  usages          PromotionUsage[]
  
  @@unique([businessId, code])
  @@index([businessId, isActive])
  @@index([businessId, startDate, endDate])
}

model PromotionUsage {
  id              String   @id @default(cuid())
  promotionId     String
  userId          String
  
  // Usage Details
  discountAmount  Decimal  @db.Decimal(10, 2)
  orderTotal      Decimal  @db.Decimal(10, 2)
  
  // Reference
  bookingId       String?  // If used for a booking
  orderId         String?  // If used for an order
  
  usedAt          DateTime @default(now())
  
  // Relations
  promotion       Promotion @relation(fields: [promotionId], references: [id], onDelete: Cascade)
  
  @@index([promotionId])
  @@index([userId])
  @@index([usedAt])
}

enum PromotionType {
  PERCENTAGE      // X% off
  FIXED_AMOUNT    // $X off
  BOGO            // Buy one get one
  BUNDLE          // Bundle discount
}

enum PromotionScope {
  ALL_SERVICES
  SPECIFIC_SERVICES
  ENTIRE_PURCHASE // Applies to total
}

// Business Photo Management
model BusinessPhoto {
  id          String    @id @default(cuid())
  businessId  String
  url         String
  type        PhotoType
  caption     String?
  order       Int       @default(0)
  isActive    Boolean   @default(true)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  business    Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  
  @@index([businessId, type])
  @@index([businessId, isActive])
}

enum PhotoType {
  HERO
  GALLERY
  LOGO
  BANNER
}

// Email Verification Token
model VerificationToken {
  id         String   @id @default(cuid())
  identifier String   // email address
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  
  @@unique([identifier, token])
  @@index([token])
}